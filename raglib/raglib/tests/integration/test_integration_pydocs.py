""" Full Workflow Test for Both LeetCode Knowledge Base and Python Docs Knowledge Base """
import asyncio
import shutil
from pathlib import Path
import numpy as np
import pytest

from raglib.doc_rag.crawler import PythonDocsCrawler
from raglib.common.chunker.vanilla_chunker import MarkdownDirectoryChunker
from raglib.common.embedder.bge_embedder import BGETextEmbedder
from raglib.common.vstore_connector.milvus_connector import MilvusConnector


@pytest.mark.integration
@pytest.mark.asyncio
async def test_python_docs_full_workflow(tmp_path: Path):
    """
    Integration test for crawling, chunking, embedding, and storing Python docs.
    Uses a temporary directory (tmp_path) for markdown output.
    """

    # 1) Crawl Python docs to tmp_path
    crawler = PythonDocsCrawler(output_dir=str(tmp_path))
    await crawler.run()

    # Check that markdown files are created
    md_files = list(tmp_path.glob("*.md"))
    assert len(md_files) > 0, "No markdown files were generated by crawler"

    # 2) Chunk the markdown files
    chunker = MarkdownDirectoryChunker(directory=str(tmp_path))
    chunks = list(chunker.generate_chunks())
    assert len(chunks) > 0, "No chunks generated from markdown files"

    # 3) Embed chunks using BGETextEmbedder
    embedder = BGETextEmbedder()
    embeddings = []
    for chunk in chunks:
        emb = embedder.embed(chunk.content)
        embeddings.append((chunk, emb))

    assert len(embeddings) == len(chunks), "Embedding count mismatch"

    # 4) Connect to Milvus and insert embeddings into 'pydocs'
    milvus = MilvusConnector(host="localhost", port="19530", collection_name="pydocs", dim=len(embeddings[0][1]))
    milvus.connect()

    # Clean up collection if needed (optional, not implemented here)
    # Insert embeddings with unique IDs
    for idx, (chunk, emb) in enumerate(embeddings):
        emb_array = np.array(emb, dtype=np.float32)
        milvus.insert_embedding(emb_array, id=idx)

    # Optional: similarity search for one embedding
    results = milvus.similarity_search(np.array(embeddings[0][1], dtype=np.float32), top_k=3)
    assert len(results) > 0, "No similar embeddings found"

    # Cleanup Milvus connection
    milvus.close()

    # Optional: cleanup generated markdown files
    shutil.rmtree(tmp_path)

